date: 02/07/2022
lets say we have a problem where we want to get out of a maze,
There are a few ways to solve a maze, one is keeping your hand on the fall
This will basically allow you to feel the layout of the maze.
Another one is to basically leaving a trial, so you can basicslly back track.

State space-

IF we are able to discribe a problem into a world where they would have different state,
then we can solve a problem where it would then have a solution. 
-our state would be a 2d array of char,
-transition would then modify the array

Recurssion would come into play because we would be using our stack, so if we hit a dead end,
then we could then back track so we can move into a new direction

When dealing with recursion, we want to get all of our base case first.

Simple situation: 
１．if we start at the finish line, we solve it, 
2. If we hit a wall we would then back track, return to the privous level
3. other wise, we can try to go into solve the other possiblilty. 

void solveMaze(char maze[][], int x, int y){
    if(maze[x][y] == 'E'){
        return "solved";
    }
    if(maze[x][y] == 'W'){
        return (something);
    }
    solveMaze();
    ...
    ...
    ...

}
Notes: 02/10/2022

Sometimes it is easir to change the data then the program.
such as trying to reduce the edge cases

Notes 02/17/2022 (dinamic data structor)
review on pointers:

example: 
int *p1, *p2;
a = 10;
pointer is a reference, you are able to access them in different ways.
`What we want to do is, which to point into memory 
It is all litaral, &gives of the address of the varible
p1 = &a; 
-this is saying that p1 will be pointing at a, therefore it will have the same 
address but also any changes you mkae to p1 it will change a as well
Given some type of array of ar[]
with pointers you can say this
p1[] == *(p1 + 3) where it knows the size of each box(which is 3)
but also p1 = &ar[0] this will be pointing to ar index 0
The concept of an array within c and c++, it is just a blub a memory
p1 = new int;
When saying new int, the new operator will have a blub of mem, it will grab the biggest amount of memory
which it can hold the variable.


